{"version":3,"sources":["sharedComponents/Range/index.jsx","sharedComponents/Range/Range.jsx","sharedComponents/ProgressBar/index.jsx","sharedComponents/ProgressBar/ProgressBar.jsx","features/progressBarContainer/progressBars/index.jsx","features/progressBarContainer/progressBars/ProgressBars.jsx","features/progressBarContainer/progressBarSelector/index.jsx","features/progressBarContainer/progressBarSelector/ProgressBarSelector.jsx","features/progressBarContainer/buttonsList/ButtonsList.jsx","features/progressBarContainer/index.jsx","features/progressBarContainer/ProgressBarContainer.jsx","services/controlsService/index.js","services/controlsService/controlsService.js","features/mainContainer/MainContainer.jsx","features/mainContainer/index.js","index.jsx"],"names":["Range","props","limit","className","style","width","percentRange","background","ProgressBar","ProgressBars","progressPercentagesPerBar","map","progressPercentage","index","ProgressBarSelector","onChange","e","setCurrentBar","parseInt","currentTarget","value","bars","label","ButtonsList","buttons","rangeCount","onClick","setClickedButtonRange","setButtonClicked","Math","random","ProgressBarContainer","useState","setProgressPercentagesPerBar","currentBar","clickedButtonRange","buttonClicked","recalculatePercentages","useCallback","newProgressPercentagesPerBar","newValue","useEffect","getControls","fetch","then","data","json","App","MainContainer","controlsList","setControlsList","mounted","items","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4111fd2c.chunk.js","sourcesContent":["import Range from './Range'\r\n\r\nexport default Range\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './range.scss'\n\nexport const Range = (props) => {\n    let limit = props.limit > 0 ? props.limit : 100\n\n    return (\n        <div\n            className=\"range\"\n            style={{\n                width: `${\n                    props.percentRange > limit\n                        ? 100\n                        : (props.percentRange / limit) * 100\n                }%`,\n                background: `${props.percentRange > limit ? 'red' : '#abdbe3'}`,\n            }}\n        />\n    )\n}\n\nexport default Range\n\nRange.propTypes = {\n    percentRange: PropTypes.arrayOf(PropTypes.number),\n    limit: PropTypes.number,\n}\n","import ProgressBar from './ProgressBar'\r\n\r\nexport default ProgressBar\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './progress-bar.scss'\r\nimport Range from '../Range'\r\n\r\nconst ProgressBar = (props) => {\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <Range percentRange={props.percentRange} limit={props.limit} />\r\n            <div className=\"percentage-text\">{props.percentRange}%</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar\r\n\r\nProgressBar.propTypes = {\r\n    percentRange: PropTypes.arrayOf(PropTypes.number),\r\n    limit: PropTypes.number,\r\n}\r\n","import ProgressBars from './ProgressBars'\r\n\r\nexport default ProgressBars\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ProgressBar from '../../../sharedComponents/ProgressBar'\r\n\r\nconst ProgressBars = (props) => {\r\n    return (\r\n        <>\r\n            {props.progressPercentagesPerBar &&\r\n                props.progressPercentagesPerBar.map(function (\r\n                    progressPercentage,\r\n                    index\r\n                ) {\r\n                    return (\r\n                        <ProgressBar\r\n                            key={index}\r\n                            limit={props.limit}\r\n                            percentRange={progressPercentage}\r\n                        />\r\n                    )\r\n                })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProgressBars\r\n\r\nProgressBars.propTypes = {\r\n    limit: PropTypes.number,\r\n    progressPercentagesPerBar: PropTypes.func,\r\n}\r\n","import ProgressBarSelector from './ProgressBarSelector'\r\nexport default ProgressBarSelector\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './progress-bar-selector.scss'\r\n\r\nconst ProgressBarSelector = (props) => {\r\n    return (\r\n        <div className=\"grid dropdownalign\">\r\n            <select\r\n                onChange={(e) =>\r\n                    props.setCurrentBar(parseInt(e.currentTarget.value))\r\n                }\r\n            >\r\n                {props.bars &&\r\n                    props.bars.map((label, index) => {\r\n                        return (\r\n                            <option key={index} value={index}>\r\n                                #progress{index + 1}\r\n                            </option>\r\n                        )\r\n                    })}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBarSelector\r\n\r\nProgressBarSelector.propTypes = {\r\n    bars: PropTypes.arrayOf(PropTypes.number),\r\n    setCurrentBar: PropTypes.func,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ButtonsList = (props) => {\r\n    return (\r\n        <div className=\"grid\">\r\n            {props.buttons &&\r\n                props.buttons.map(function (rangeCount, index) {\r\n                    return (\r\n                        <div key={index}>\r\n                            <button\r\n                                onClick={() => {\r\n                                    props.setClickedButtonRange(rangeCount)\r\n                                    props.setButtonClicked(Math.random())\r\n                                }}\r\n                            >\r\n                                {rangeCount}\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                }, this)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonsList\r\n\r\nButtonsList.propTypes = {\r\n    bars: PropTypes.arrayOf(PropTypes.number),\r\n    buttons: PropTypes.arrayOf(PropTypes.number),\r\n    setClickedButtonRange: PropTypes.func,\r\n    setButtonClicked: PropTypes.func,\r\n}\r\n","import ProgressBarContainer from './ProgressBarContainer'\r\n\r\nexport default ProgressBarContainer\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ProgressBars from './progressBars'\r\nimport ProgressBarSelector from './progressBarSelector'\r\nimport './progress-bar-container.scss'\r\nimport ButtonsList from './buttonsList/ButtonsList'\r\n\r\nconst ProgressBarContainer = (props) => {\r\n    let [progressPercentagesPerBar, setProgressPercentagesPerBar] = useState([\r\n        0,\r\n    ])\r\n    let [currentBar, setCurrentBar] = useState(0)\r\n    let [clickedButtonRange, setClickedButtonRange] = useState(0)\r\n    let [buttonClicked, setButtonClicked] = useState(false)\r\n\r\n    const recalculatePercentages = useCallback(() => {\r\n        const newProgressPercentagesPerBar = [...progressPercentagesPerBar]\r\n        if (newProgressPercentagesPerBar) {\r\n            var newValue =\r\n                newProgressPercentagesPerBar[currentBar] + clickedButtonRange\r\n            newProgressPercentagesPerBar[currentBar] =\r\n                newValue >= 0 ? newValue : 0\r\n        }\r\n\r\n        setProgressPercentagesPerBar(newProgressPercentagesPerBar)\r\n    }, [clickedButtonRange, buttonClicked])\r\n\r\n    useEffect(() => {\r\n        if (props.bars) {\r\n            setProgressPercentagesPerBar([...props.bars])\r\n        }\r\n    }, [props.bars])\r\n\r\n    useEffect(() => {\r\n        if (clickedButtonRange && clickedButtonRange !== 0) {\r\n            recalculatePercentages(clickedButtonRange)\r\n        }\r\n    }, [clickedButtonRange, recalculatePercentages, buttonClicked])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <ProgressBars\r\n                limit={props.limit}\r\n                progressPercentagesPerBar={progressPercentagesPerBar}\r\n            />\r\n            <div className=\"grid\">\r\n                <ProgressBarSelector\r\n                    setCurrentBar={setCurrentBar}\r\n                    bars={props.bars}\r\n                />\r\n                <ButtonsList\r\n                    buttons={props.buttons}\r\n                    setClickedButtonRange={setClickedButtonRange}\r\n                    setButtonClicked={setButtonClicked}\r\n                    currentBar={currentBar}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBarContainer\r\n\r\nProgressBarContainer.propTypes = {\r\n    bars: PropTypes.arrayOf(PropTypes.number),\r\n    buttons: PropTypes.arrayOf(PropTypes.number),\r\n    limit: PropTypes.number,\r\n}\r\n","import getControls from './controlsService'\n\nexport default getControls\n","const getControls = function () {\n    return fetch('http://pb-api.herokuapp.com/bars').then((data) => data.json())\n}\n\nexport default getControls\n","import React, { useEffect, useState } from 'react'\r\nimport './MainContainer.scss'\r\nimport ProgressBarContainer from '../progressBarContainer'\r\nimport getControls from '../../services/controlsService'\r\n\r\nfunction App() {\r\n    const [controlsList, setControlsList] = useState([])\r\n\r\n    useEffect(() => {\r\n        let mounted = true\r\n        getControls().then((items) => {\r\n            if (mounted) {\r\n                setControlsList(items)\r\n            }\r\n        })\r\n        return () => (mounted = false)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ProgressBarContainer\r\n                limit={\r\n                    controlsList && controlsList.limit\r\n                        ? controlsList.limit\r\n                        : 100\r\n                }\r\n                buttons={\r\n                    controlsList && controlsList.buttons\r\n                        ? controlsList.buttons\r\n                        : null\r\n                }\r\n                bars={\r\n                    controlsList && controlsList.bars ? controlsList.bars : null\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import MainContainer from './MainContainer'\n\nexport default MainContainer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport MainContainer from './features/mainContainer'\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainContainer />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}