{"version":3,"sources":["sharedComponents/Range/index.jsx","sharedComponents/Range/Range.jsx","sharedComponents/ProgressBar/index.jsx","sharedComponents/ProgressBar/ProgressBar.jsx","features/progressBarContainer/progressBars/index.jsx","features/progressBarContainer/progressBars/ProgressBars.jsx","features/progressBarContainer/progressBarSelector/index.jsx","features/progressBarContainer/progressBarSelector/ProgressBarSelector.jsx","features/progressBarContainer/buttonsList/ButtonsList.jsx","features/progressBarContainer/index.jsx","features/progressBarContainer/ProgressBarContainer.jsx","services/controlsService/index.js","services/controlsService/controlsService.js","features/mainContainer/MainContainer.jsx","features/mainContainer/index.js","sharedComponents/ErrorBoundary/ErrorBoundary.jsx","index.jsx"],"names":["Range","props","limit","data-testid","className","style","width","percentRange","background","ProgressBar","ProgressBars","progressPercentagesPerBar","map","progressPercentage","index","ProgressBarSelector","onChange","e","setCurrentBar","parseInt","currentTarget","value","bars","label","ButtonsList","buttons","rangeCount","onClick","setClickedButtonRange","setButtonClicked","Math","random","ProgressBarContainer","useState","setProgressPercentagesPerBar","currentBar","clickedButtonRange","buttonClicked","recalculatePercentages","useCallback","newProgressPercentagesPerBar","newValue","useEffect","getControls","fetch","then","data","json","catch","MainContainer","controlsList","setControlsList","a","ErrorBoundary","state","hasError","this","children","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e88457a.chunk.js","sourcesContent":["import Range from './Range'\r\n\r\nexport default Range\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './range.scss'\n\nexport const Range = (props) => {\n    let limit = props.limit > 0 ? props.limit : 100\n\n    return (\n        <div\n            data-testid=\"range-bar\"\n            className=\"range\"\n            style={{\n                width: `${\n                    props.percentRange > limit\n                        ? 100\n                        : (props.percentRange / limit) * 100\n                }%`,\n                background: `${props.percentRange > limit ? 'red' : '#abdbe3'}`,\n            }}\n        />\n    )\n}\n\nexport default Range\n\nRange.propTypes = {\n    percentRange: PropTypes.number,\n    limit: PropTypes.number,\n}\n","import ProgressBar from './ProgressBar'\r\n\r\nexport default ProgressBar\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './progress-bar.scss'\r\nimport Range from '../Range'\r\n\r\nconst ProgressBar = (props) => {\r\n    return (\r\n        <div data-testid=\"progress-bar\" className=\"progress-bar\">\r\n            <Range percentRange={props.percentRange} limit={props.limit} />\r\n            <div className=\"percentage-text\">{props.percentRange}%</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar\r\n\r\nProgressBar.propTypes = {\r\n    percentRange: PropTypes.number,\r\n    limit: PropTypes.number,\r\n}\r\n","import ProgressBars from './ProgressBars'\r\n\r\nexport default ProgressBars\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ProgressBar from '../../../sharedComponents/ProgressBar'\r\n\r\nconst ProgressBars = (props) => {\r\n    return (\r\n        <>\r\n            {props.progressPercentagesPerBar &&\r\n                props.progressPercentagesPerBar.map(function (\r\n                    progressPercentage,\r\n                    index\r\n                ) {\r\n                    return (\r\n                        <ProgressBar\r\n                            key={index}\r\n                            limit={props.limit}\r\n                            percentRange={progressPercentage}\r\n                        />\r\n                    )\r\n                })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProgressBars\r\n\r\nProgressBars.propTypes = {\r\n    limit: PropTypes.number,\r\n    progressPercentagesPerBar: PropTypes.arrayOf(PropTypes.number),\r\n}\r\n","import ProgressBarSelector from './ProgressBarSelector'\r\nexport default ProgressBarSelector\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './progress-bar-selector.scss'\r\n\r\nconst ProgressBarSelector = (props) => {\r\n    return (\r\n        <div className=\"grid dropdownalign\">\r\n            <select\r\n                onChange={(e) =>\r\n                    props.setCurrentBar(parseInt(e.currentTarget.value))\r\n                }\r\n            >\r\n                {props.bars &&\r\n                    props.bars.map((label, index) => {\r\n                        return (\r\n                            <option key={index} value={index}>\r\n                                #progress{index + 1}\r\n                            </option>\r\n                        )\r\n                    })}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBarSelector\r\n\r\nProgressBarSelector.propTypes = {\r\n    bars: PropTypes.arrayOf(PropTypes.number),\r\n    setCurrentBar: PropTypes.func,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ButtonsList = (props) => {\r\n    return (\r\n        <div className=\"grid\">\r\n            {props.buttons &&\r\n                props.buttons.map(function (rangeCount, index) {\r\n                    return (\r\n                        <div key={index}>\r\n                            <button\r\n                                onClick={() => {\r\n                                    props.setClickedButtonRange(rangeCount)\r\n                                    props.setButtonClicked(Math.random())\r\n                                }}\r\n                            >\r\n                                {rangeCount}\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                }, this)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonsList\r\n\r\nButtonsList.propTypes = {\r\n    bars: PropTypes.arrayOf(PropTypes.number),\r\n    buttons: PropTypes.arrayOf(PropTypes.number),\r\n    setClickedButtonRange: PropTypes.func,\r\n    setButtonClicked: PropTypes.func,\r\n}\r\n","import ProgressBarContainer from './ProgressBarContainer'\r\n\r\nexport default ProgressBarContainer\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ProgressBars from './progressBars'\r\nimport ProgressBarSelector from './progressBarSelector'\r\nimport './progress-bar-container.scss'\r\nimport ButtonsList from './buttonsList/ButtonsList'\r\n\r\nconst ProgressBarContainer = (props) => {\r\n    let [progressPercentagesPerBar, setProgressPercentagesPerBar] = useState([\r\n        0,\r\n    ])\r\n    let [currentBar, setCurrentBar] = useState(0)\r\n    let [clickedButtonRange, setClickedButtonRange] = useState(0)\r\n    let [buttonClicked, setButtonClicked] = useState(false)\r\n\r\n    const recalculatePercentages = useCallback(() => {\r\n        const newProgressPercentagesPerBar = [...progressPercentagesPerBar]\r\n        if (newProgressPercentagesPerBar) {\r\n            var newValue =\r\n                newProgressPercentagesPerBar[currentBar] + clickedButtonRange\r\n            newProgressPercentagesPerBar[currentBar] =\r\n                newValue >= 0 ? newValue : 0\r\n        }\r\n\r\n        setProgressPercentagesPerBar(newProgressPercentagesPerBar)\r\n    }, [clickedButtonRange, buttonClicked])\r\n\r\n    useEffect(() => {\r\n        if (props.bars) {\r\n            setProgressPercentagesPerBar([...props.bars])\r\n        }\r\n    }, [props.bars])\r\n\r\n    useEffect(() => {\r\n        if (clickedButtonRange && clickedButtonRange !== 0) {\r\n            recalculatePercentages(clickedButtonRange)\r\n        }\r\n    }, [clickedButtonRange, recalculatePercentages, buttonClicked])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <ProgressBars\r\n                limit={props.limit}\r\n                progressPercentagesPerBar={progressPercentagesPerBar}\r\n            />\r\n            <div className=\"grid\">\r\n                <ProgressBarSelector\r\n                    setCurrentBar={setCurrentBar}\r\n                    bars={props.bars}\r\n                />\r\n                <ButtonsList\r\n                    buttons={props.buttons}\r\n                    setClickedButtonRange={setClickedButtonRange}\r\n                    setButtonClicked={setButtonClicked}\r\n                    currentBar={currentBar}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBarContainer\r\n\r\nProgressBarContainer.propTypes = {\r\n    bars: PropTypes.arrayOf(PropTypes.number),\r\n    buttons: PropTypes.arrayOf(PropTypes.number),\r\n    limit: PropTypes.number,\r\n}\r\n","import getControls from './controlsService'\n\nexport default getControls\n","const getControls = function () {\n    return fetch('https://pb-api.herokuapp.com/bars')\n        .then((data) => data.json())\n        .catch(function () {\n            return {\n                buttons: [26, 25, -43, -8],\n                bars: [77, 43, 40, 55],\n                limit: 180,\n            }\n        })\n}\n\nexport default getControls\n","import React, { useEffect, useState } from 'react'\r\nimport './MainContainer.scss'\r\nimport ProgressBarContainer from '../progressBarContainer'\r\nimport getControls from '../../services/controlsService'\r\n\r\nfunction MainContainer() {\r\n    const [controlsList, setControlsList] = useState([])\r\n\r\n    useEffect(async () => {\r\n        setControlsList(await getControls())\r\n    }, [])\r\n\r\n    return (\r\n        <div data-testid=\"app\" className=\"App\">\r\n            <ProgressBarContainer\r\n                limit={\r\n                    controlsList && controlsList.limit\r\n                        ? controlsList.limit\r\n                        : 100\r\n                }\r\n                buttons={\r\n                    controlsList && controlsList.buttons\r\n                        ? controlsList.buttons\r\n                        : null\r\n                }\r\n                bars={\r\n                    controlsList && controlsList.bars ? controlsList.bars : null\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContainer\r\n","import MainContainer from './MainContainer'\n\nexport default MainContainer\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { hasError: false }\r\n    }\r\n\r\n    static getDerivedStateFromError() {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        // You can also log the error to an error reporting service\r\n        // logErrorToMyService(error, errorInfo)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary\r\n\r\nErrorBoundary.propTypes = {\r\n    children: PropTypes.any,\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport MainContainer from './features/mainContainer'\nimport ErrorBoundary from './sharedComponents/ErrorBoundary/ErrorBoundary'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ErrorBoundary>\n            <MainContainer />\n        </ErrorBoundary>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}